name: Slides (Marp)

on:
  push:
    branches: [ main ]
    paths:
      - 'slides/**/*.md'
      - 'slides/**/*.png'
      - 'slides/**/*.jpg'
      - 'slides/**/*.jpeg'
      - 'slides/**/*.svg'
      - 'slides/**/*.gif'
      - 'slides/**/*.css'
      - '.github/workflows/slides.yml'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: slides-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build HTML + PDF
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Marp CLI
        run: npm i -g @marp-team/marp-cli@latest

      # Copiamos assets (todo lo que NO sea .md) preservando estructura
      - name: Copy slide assets
        run: |
          mkdir -p dist/slides
          rsync -av slides/ dist/slides/ --exclude='*.md'

      # Compilamos cada .md a HTML y PDF, manteniendo subcarpetas
      - name: Build HTML + PDF (preserving dirs)
        shell: bash
        run: |
          shopt -s globstar
          for f in slides/**/*.md; do
            [ -f "$f" ] || continue
            out_html="dist/${f%.*}.html"
            out_pdf="dist/${f%.*}.pdf"
            mkdir -p "$(dirname "$out_html")"
            marp "$f" --html --allow-local-files -o "$out_html"
            marp "$f" --pdf  --allow-local-files -o "$out_pdf"
          done

      # Generamos index.html en la RAÍZ del sitio
      - name: Generate index.html
        shell: bash
        run: |
          mkdir -p dist
          {
            echo '<!doctype html><meta charset="utf-8"><title>Slides</title>'
            echo '<h1>Slides</h1><ul>'
            find dist/slides -name '*.html' | sort | sed 's|^dist/||' \
              | awk '{printf "<li><a href=\"%s\">%s</a></li>\n",$0,$0}'
            echo '</ul><p><em>Generated by GitHub Actions — Marp CLI</em></p>'
          } > dist/index.html
          echo "Root content:"; ls -la dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: slides-dist
          path: dist
          if-no-files-found: error

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: slides-dist
          path: site   # <— bajamos en 'site' para evitar anidar dist/dist

      # Normalizamos raíz: si por cualquier motivo quedó site/dist/*, lo movemos
      - name: Normalize root
        shell: bash
        run: |
          echo "Tree after download:"; ls -laR site || true
          if [ -f site/index.html ]; then
            echo "index.html ya está en la raíz de 'site/'"
          elif [ -f site/dist/index.html ]; then
            echo "Moviendo site/dist/* => site/"
            shopt -s dotglob
            mv site/dist/* site/
            rmdir site/dist
          fi
          echo "Tree before upload:"; ls -laR site

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy
        id: deploy
        uses: actions/deploy-pages@v4
